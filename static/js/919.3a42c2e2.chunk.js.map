{"version":3,"file":"static/js/919.3a42c2e2.chunk.js","mappings":"oOAAaA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,wBACGA,EAASC,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACtCC,EAAeH,EAAY,yCACKA,GAClC,GAEJ,OACE,2BACE,gBAAKI,IAAKD,EAAcE,IAAKJ,KAC7B,uBAAIA,KACJ,uCAAeC,OAHRH,EAMZ,KAdmB,ECgBxB,EAXa,WACX,OAAgCO,EAAAA,EAAAA,UAAS,IAAzC,eAAOT,EAAP,KAAiBU,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQH,GAASI,KAAKL,EACvB,GAAE,CAACC,KAEG,8BAAGX,IAAY,SAACD,EAAD,CAAUC,SAAUA,KAC3C,C,+LCZKgB,EAAW,+BACXC,EAAU,2CAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2FACQC,EADR,UACiBH,EADjB,+BACgDC,GADhD,SAEeG,EAAAA,EAAAA,IAAUD,GAAKJ,MAAK,qBAAGM,KAAgBC,OAAnB,IAFnC,mHAKeC,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,GAAjC,8EACQL,EADR,UACiBH,EADjB,yBAC0CC,EAD1C,kBAC2DO,GAD3D,SAEeJ,EAAAA,EAAAA,IAAUD,GAAKJ,MAAK,qBAAGM,KAAgBC,OAAnB,IAFnC,mHAKeG,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+Bd,GAA/B,8EACQQ,EADR,UACiBH,EADjB,kBACmCL,EADnC,YAC8CM,GAD9C,SAEeG,EAAAA,EAAAA,IAAUD,GAAKJ,MAAK,qBAAGM,IAAH,IAFnC,mHAKeK,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0Bf,GAA1B,8EACQQ,EADR,UACiBH,EADjB,kBACmCL,EADnC,oBACsDM,GADtD,SAEeG,EAAAA,EAAAA,IAAUD,GAAKJ,MAAK,qBAAGM,KAAgBC,OAAnB,IAFnC,mHAKeR,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBH,GAAvB,8EACQQ,EADR,UACiBH,EADjB,kBACmCL,EADnC,oBACsDM,GADtD,SAEeG,EAAAA,EAAAA,IAAUD,GAAKJ,MAAK,qBAAGM,KAAgBM,IAAnB,IAFnC,0G","sources":["components/CastList/CastList.jsx","pages/Cast.jsx","services/APIService.js"],"sourcesContent":["export const CastList = ({ castInfo }) => (\n  <ul>\n    {castInfo.map(({ cast_id, profile_path, name, character }) => {\n      const profileImage = profile_path\n        ? `https://image.tmdb.org/t/p/w500${profile_path}`\n        : '';\n\n      return (\n        <li key={cast_id}>\n          <img src={profileImage} alt={name} />\n          <p>{name}</p>\n          <p>Character: {character}</p>\n        </li>\n      );\n    })}\n  </ul>\n);\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/APIService';\nimport { CastList } from 'components/CastList/CastList';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getCast(movieId).then(setCastInfo);\n  }, [movieId]);\n\n  return <>{castInfo && <CastList castInfo={castInfo} />}</>;\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=5e1540d5ab73ca6abba3993527b5288a';\n\nasync function getTrendingMovies() {\n  const url = `${BASE_URL}/trending/movie/day?${API_KEY}`;\n  return await axios.get(url).then(({ data }) => data.results);\n}\n\nasync function getSearchedMovies(query) {\n  const url = `${BASE_URL}/search/movie?${API_KEY}&query=${query}`;\n  return await axios.get(url).then(({ data }) => data.results);\n}\n\nasync function getMovieDetails(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?${API_KEY}`;\n  return await axios.get(url).then(({ data }) => data);\n}\n\nasync function getReviews(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?${API_KEY}`;\n  return await axios.get(url).then(({ data }) => data.results);\n}\n\nasync function getCast(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?${API_KEY}`;\n  return await axios.get(url).then(({ data }) => data.cast);\n}\n\nexport {\n  getTrendingMovies,\n  getSearchedMovies,\n  getMovieDetails,\n  getReviews,\n  getCast,\n};\n"],"names":["CastList","castInfo","map","cast_id","profile_path","name","character","profileImage","src","alt","useState","setCastInfo","movieId","useParams","useEffect","getCast","then","BASE_URL","API_KEY","getTrendingMovies","url","axios","data","results","getSearchedMovies","query","getMovieDetails","getReviews","cast"],"sourceRoot":""}